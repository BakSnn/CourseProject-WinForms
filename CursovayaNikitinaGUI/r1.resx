<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        yD9YqstXmFm8rSRFmz701r2Eh+Neia+TdcxVMkdpAR2OrEx0NWvpjHNfdTzCcD0aHyBH0YJQr10wnORj
        Js/YlqCTTdyibGzy2rib6fzyXxfsOcRN/L9tver5FVfoNf0uV9Fi6a+S0s/eA0zn++yMsRmO8hw3xv37
        fP2xWNGvmt0xwNVzGaupjalPEGY3jzLjo5ffcHt9Dp8iH3sG+K8VVPAEZSxgFpeS248mUVo5yk7e4C9U
        Kf79UFXnWv/RtfAy6xnLXOYxlWIy+7mvRzjFQcrZxNbYRhN1X6BlICysAf/fCdaxjixKGMNoSigggxSi
        dNDEcao5QDUNcbzpczO6geimkkpWUcAoxjCKQnIJEiBCG43UcpCDHLHzMZupAnw0Lez5YD5PAB8Q1e6H
        YuO/QpzgBFsB8OPHRzReoQevAOcnbPCSoNb6r9EjOIoIIAIIIoAgAggigCACCCKAIAIIIoAgAggigCAC
        CCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCAC
        CCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCAC
        CCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCACCCKAIAIIIoAgAggigCAC
        CCKAIAIIIoAIIIgAggggiACCCCCIAIIIIIgAggggiACCCCCIAIIIIIgAggggiACCCCCIAIIIIIgAgggg
        iACCCCCYS5LN7QNkkU8BOYRIJkoHp2mkgSbCgyAbqeRQQD7ZBAnQTRtNNNBICz0iQB4TmcV0xlNIJqkE
        8GMRJUI7DVSzi3K2U2NkqgKUMJ1ZTGEU+YRIxo8Pix7CtFDHfirYyrs0/msKkMo0lvJJSsnsJ3XJpDOE
        CSwmQi1/5WU202BQBgqYxzKuZDjJ/USXQibFzOBm2niPjaylYlBc62ImyA28QCNWzCXMNu6iaMDrSIWN
        fQ1c1vbTXPYpYgVbCds47in+yA0EB9jf9bb2NXD5gh6N7+MqXqAtjgCibOd2srQWIJPb2U40jmO380eu
        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
</value>
  </data>
</root>